1. Изучите предоставленный пример кода и выделите в нем проблемы:
- низкий уровень абстракции,
- высокая связность,
- низкая цельность,
- проблемы с компоновкой (опишите в каких классах и функциях вы нашли каждую из проблем).

Предложите способы улучшения качества кода в примере.
Реализуйте улучшенную версию и объясните, каким образом вы решили выявленные проблемы.


--- НИЗКИЙ УРОВЕНЬ АБСТРАКЦИИ ---
- Класс Customer не только описывает клиента, но еще отвечает за открытие счета в банке и генерацию номера банковского счета.
- Класс Account не только описывает счет, но и отвечает за пополнение и снятие денег со счета.

--- ВЫСОКАЯ СВЯЗНОСТЬ ---
- Класс Customer связан с классом Bank, без необходимости. При создании клиента один из параметров клиента является 'bank', хотя и так понятно,
что клиент это клиент данного банка. Классу Customer нет необходимости иметь функционал открытия банковского счета, тем более что такой функционал
уже есть в классе Bank - лишняя, ненужная связанность.
- Класс Account не только описывает счет, но еще отвечает за пополнение и снятие денежных средств и после этого обновляет данные в хранилище
банковских счетов в Bank.

--- НИЗКАЯ ЦЕЛЬНОСТЬ ---
- Функционал управления счетами разбросан по трем разным классам. Было бы правильней собрать его в рамках одного класса.


--- ПОЯСНЕНИЯ ПО УЛУЧШЕННОЙ ВЕРСИИ ---
1. Класс Customer отвечает теперь только за описание клиента и его данные. Также добавлен дандр метод для вывода информации о клиенте.
Из данных клиента удалена информация о банке, так как в банке и так понимают, что это их клиент.

2. Класс Account отвечает теперь только за описание параметров банковского счета. Оставлена функция генерации банковского счета в
классе Account, так как класс используется только при открытии счета и номер счета также генерируется в момент открытия счета.
Для открытия счета теперь нет необходимости передавать в класс Account следующие данные:
    - банк
    - номер счета
    - имя клиента
    - адрес клиента
    - баланс

Достаточно передать только 2 параметра:
    - объект Customer
    - вносимая на счета сумма

Функционал deposit и withdraw перенесены в класс Bank. 

3. В классе Bank, помимо хранилища банковских счетов, теперь собран и весь функционал управления счетами. Это позволило повысить цельность
кода и снизить его связанность. Уровень абстракции повышен, теперь объекты более приближены к их реальным прототипам. Клиент это клиент,
счет это счет, а банк хранит данные о клиентах и счетах и управляет этими данными.

Упрощение/оптимизация кода:
- Для открытия счета теперь достаточно передать только объект Customer (а не все данными о Customer по отдельности, так будет
проще вносить обновления кода в будущем, править только в одном месте) и вносимую на счет сумму.
- Изменен принцип работы функции get_account. Теперь не нужно делать дополнительный шаг и создавать допольнительный объект
по принципу alice_account. Достаточно передать Customer в метод get_account.
- Для снития или пополнения счета теперь не нужно делать дополнительный шаг и создавать допольнительный объект
по принципу alice_account. Достаточно передать Customer и сумму пополнения или снятия в соответствующий метод. Может потребоваться
дополнтельная корректировка кода в случае если Банк будет открывать по несколько счетов своим клиентам.

--- ДОПОЛНИТЕЛЬНО ---
Добавлены проверки try-except
Добавлено логирование операций в упрощенном виде через функцию print.